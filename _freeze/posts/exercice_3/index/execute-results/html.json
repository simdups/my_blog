{
  "hash": "da7b102a1e0122a6c3440f3c19695892",
  "result": {
    "markdown": "---\ntitle: \"Exercice 3\"\nauthor: \"Simon Dupas-Brousse\"\ndate: \"2024-03-02\"\ncategories: [news, code, analysis]\n---\n\n\n1.  Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"data/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\n.sqlite .json .parquet\n\n2.  Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\ntokyo = read_parquet(\"~/M1/S2/R avancé/my_blog/data/tokyo_athletes.parquet\")\nstr(tokyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'tbl_df', 'tbl' and 'data.frame':\t11085 obs. of  3 variables:\n $ Name      : chr  \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr  \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr  \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n```\n:::\n:::\n\n\n3.  Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'jsonlite' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nolympics = read_json(\"~/M1/S2/R avancé/my_blog/data/olympics_athletes.json\")\nlength(olympics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731\n```\n:::\n:::\n\n\nC'est une liste qui contient 269731 listes. Comme le montre cet exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]]$ID\n[1] 1\n\n[[1]]$Name\n[1] \"A Dijiang\"\n\n[[1]]$Sex\n[1] \"M\"\n\n[[1]]$Age\n[1] 24\n\n[[1]]$Height\n[1] 180\n\n[[1]]$Weight\n[1] 80\n\n[[1]]$Team\n[1] \"China\"\n\n[[1]]$NOC\n[1] \"CHN\"\n\n[[1]]$Games\n[1] \"1992 Summer\"\n\n[[1]]$City\n[1] \"Barcelona\"\n\n[[1]]$Sport\n[1] \"Basketball\"\n\n[[1]]$Event\n[1] \"Basketball Men's Basketball\"\n```\n:::\n:::\n\n\nChaque liste contient des données propres à un athlète. Donc on a des infos (ID, nom, ...) sur 269731 athlètes.\n\nOn va le convertir en df pour la suite :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolymp = fromJSON(\"~/M1/S2/R avancé/my_blog/data/olympics_athletes.json\")\nstr(olymp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t269731 obs. of  13 variables:\n $ ID    : int  1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr  \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : chr  \"M\" \"M\" \"M\" \"M\" ...\n $ Age   : int  24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int  180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num  80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr  \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr  \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr  \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr  \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr  \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr  \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr  NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\n4.  Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\ncon <- dbConnect(SQLite(), dbname = \"~/M1/S2/R avancé/my_blog/data/data.sqlite\")\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mtcars\"            \"olympics_athletes\" \"tokyo_athletes\"   \n[4] \"tokyo_medals\"      \"tokyo_teams\"      \n```\n:::\n:::\n\n\n5.  Créez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\nJe me suis rendu compte que dbWriteTable ne prend que des data.frame en \"value\". Donc j'ai fait quelques transformations de class pour pouvoir insérer les 2 tables (je l'ai déjà fait plus haut pour le JSON).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_df <- as.data.frame(tokyo)\nstr(tokyo_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t11085 obs. of  3 variables:\n $ Name      : chr  \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr  \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr  \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n```\n:::\n\n```{.r .cell-code}\n# comme je l'ai déjà fait je mets les commandes en commentaire\n# dbWriteTable(con,\"tokyo_athletes\", tokyo_df)\n# dbWriteTable(con,\"olympics_athletes\", olymp)\n```\n:::\n\n\n6.  Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con,\"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n7.  Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nolympiii = dbReadTable(con,\"olympics_athletes\")\nolympiii_tibble = as_tibble(olympiii)\nclass(olympiii_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n8.  Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nolympiii_tibble = olympiii_tibble %>%\n  mutate(Sex = factor(Sex))\n\nclass(olympiii_tibble$Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\n9.  Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment. Les questions suivantes nécessitent l'application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympiii_tibble <- olympiii_tibble |>\n  separate_wider_delim(Games,\n    names = c(\"Year\", \"isSummer\"),\n    delim = \" \"\n  ) |>\n  mutate(\n    Year = as.integer(Year),\n    isSummer = if_else(isSummer == \"Summer\", TRUE, FALSE)\n  )\n\nstr(olympiii_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [269,731 × 14] (S3: tbl_df/tbl/data.frame)\n $ ID      : int [1:269731] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name    : chr [1:269731] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex     : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age     : int [1:269731] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height  : int [1:269731] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight  : num [1:269731] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team    : chr [1:269731] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC     : chr [1:269731] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Year    : int [1:269731] 1992 2012 1920 1900 1988 1988 1992 1992 1994 1994 ...\n $ isSummer: logi [1:269731] TRUE TRUE TRUE TRUE FALSE FALSE ...\n $ City    : chr [1:269731] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport   : chr [1:269731] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event   : chr [1:269731] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal   : chr [1:269731] NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\n10. Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\nPour les plus jeunes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_age_by_year <- olympiii_tibble |>\n  group_by(Year) |> \n  summarize(mean_age = mean(Age, na.rm = TRUE)) |> \n  arrange(mean_age)\nhead(mean_age_by_year,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year mean_age\n  <int>    <dbl>\n1  1896     23.6\n```\n:::\n:::\n\n\nPour les plus vieux :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_age_by_year |> \n  arrange(desc(mean_age)) |> \n  head(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year mean_age\n  <int>    <dbl>\n1  1932     29.6\n```\n:::\n:::\n\n\n11. Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemale_athletes <- olympiii_tibble %>%\n  filter(Sex == \"F\",isSummer == TRUE) |> \n  arrange(desc(Height))\n\nhead(female_athletes$Sport,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Basketball\"\n```\n:::\n:::\n\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_height_by_year <- female_athletes %>%\n  group_by(Year) %>%\n  top_n(1, Height) %>%\n  select(Year, Sport, Height, Name)\nlargest_height_by_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 37 × 4\n# Groups:   Year [23]\n    Year Sport      Height Name                                       \n   <int> <chr>       <int> <chr>                                      \n 1  2000 Basketball    213 \"Magorzata Teresa \\\"Margo\\\" Dydek (-Twigg)\"\n 2  1976 Basketball    210 \"Ujana Semjonova\"                          \n 3  1980 Basketball    210 \"Ujana Semjonova\"                          \n 4  2012 Basketball    206 \"Wei Wei\"                                  \n 5  1984 Basketball    205 \"Chen Yuefang\"                             \n 6  1984 Basketball    205 \"Susanna \\\"Sue\\\" Geh\"                      \n 7  1988 Basketball    204 \"Zheng Haixia\"                             \n 8  1992 Basketball    204 \"Zheng Haixia\"                             \n 9  1996 Basketball    204 \"Zheng Haixia\"                             \n10  2016 Basketball    203 \"Elizabeth Folake \\\"Liz\\\" Cambage\"         \n# ℹ 27 more rows\n```\n:::\n:::\n\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_height_by_year %>%\n  count(Sport)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 × 3\n# Groups:   Year [23]\n    Year Sport         n\n   <int> <chr>     <int>\n 1  1920 Diving        1\n 2  1924 Fencing       1\n 3  1924 Tennis        1\n 4  1928 Fencing       1\n 5  1932 Fencing       1\n 6  1936 Fencing       1\n 7  1948 Athletics     3\n 8  1952 Athletics     3\n 9  1956 Athletics     1\n10  1960 Swimming      2\n# ℹ 17 more rows\n```\n:::\n:::\n\n\nVous disposez du texte suivant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte = \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n```\n:::\n\n\n12. En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que \"26 Juillet 2024\". Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\ndate = str_extract_all(texte, \"\\\\b\\\\d{1,2}\\\\s(?:Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre)\\\\s\\\\d{4}\\\\b\")\ndate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\n13. Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte_avant_date = str_replace_all(date[[1]],\n  c(\"Juillet\" = \"07\", \"Août\" = \"08\")\n)\ntexte_avant_date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n```\n:::\n:::\n\n\n14. Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:arrow':\n\n    duration\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\ntexte_modifie <- gsub(\"\\\\b(\\\\d{1,2}) (\\\\d{2}) (\\\\d{4})\\\\b\", \"\\\\1-\\\\2-\\\\3\", texte_avant_date)\ndate_final = dmy(texte_modifie)\nclass(date_final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n15. Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo = interval(start = \"2016-08-20\", end = \"2021-07-23\")\nas.numeric(Rio_Tokyo, \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1798\n```\n:::\n\n```{.r .cell-code}\nas.numeric(Rio_Tokyo, \"week\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 256.8571\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris = interval(start = \"2021-08-08\", end = \"2024-07-26\")\nas.numeric(Tokyo_Paris, \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1083\n```\n:::\n\n```{.r .cell-code}\nas.numeric(Tokyo_Paris, \"week\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 154.7143\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}