{
  "hash": "7e9d990cf68b585daff0ac6e7160416a",
  "result": {
    "markdown": "---\ntitle: \"Exercice 3\"\nauthor: \"Simon Dupas-Brousse\"\ndate: \"2024-03-02\"\ncategories: [news, code, analysis]\neval: false\n---\n\n\n1.  Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"data/\")\n```\n:::\n\n\n.sqlite .json .parquet\n\n2.  Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\ntokyo = read_parquet(\"data/tokyo_athletes.parquet\")\nstr(tokyo)\n```\n:::\n\n\n3.  Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\nolympics = read_json(\"data/olympics_athletes.json\")\nlength(olympics)\n```\n:::\n\n\nC'est une liste qui contient 269731 listes. Comme le montre cet exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics[1]\n```\n:::\n\n\nChaque liste contient des données propres à un athlète. Donc on a des infos (ID, nom, ...) sur 269731 athlètes.\n\nOn va le convertir en df pour la suite :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolymp = fromJSON(\"data/olympics_athletes.json\")\nstr(olymp)\n```\n:::\n\n\n4.  Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RSQLite)\ncon <- dbConnect(SQLite(), dbname = \"data/data.sqlite\")\ndbListTables(con)\n```\n:::\n\n\n5.  Créez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\nJe me suis rendu compte que dbWriteTable ne prend que des data.frame en \"value\". Donc j'ai fait quelques transformations de class pour pouvoir insérer les 2 tables (je l'ai déjà fait plus haut pour le JSON).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_df <- as.data.frame(tokyo)\nstr(tokyo_df)\n\ndbWriteTable(con,\"tokyo_athletes\", tokyo_df)\ndbWriteTable(con,\"olympics_athletes\", olymp)\n```\n:::\n\n\n6.  Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con,\"olympics_athletes\")\n```\n:::\n\n\n7.  Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nolympiii = dbReadTable(con,\"olympics_athletes\")\nolympiii_tibble = as_tibble(olympiii)\nclass(olympiii_tibble)\n```\n:::\n\n\n8.  Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\n\nolympiii_tibble = olympiii_tibble %>%\n  mutate(Sex = factor(Sex))\n\nclass(olympiii_tibble$Sex)\n```\n:::\n\n\n9.  Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment. Les questions suivantes nécessitent l'application de plusieurs instructions en séquence. Essayez tant que possible de chaîner les instructions avec des pipes (%\\>% ou \\|\\>).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympiii_tibble <- olympiii_tibble |>\n  separate_wider_delim(Games,\n    names = c(\"Year\", \"isSummer\"),\n    delim = \" \"\n  ) |>\n  mutate(\n    Year = as.integer(Year),\n    isSummer = if_else(isSummer == \"Summer\", TRUE, FALSE)\n  )\n\nstr(olympiii_tibble)\n```\n:::\n\n\n10. Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\nPour les plus jeunes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_age_by_year <- olympiii_tibble |>\n  group_by(Year) |> \n  summarize(mean_age = mean(Age, na.rm = TRUE)) |> \n  arrange(mean_age)\nhead(mean_age_by_year,1)\n```\n:::\n\n\nPour les plus vieux :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_age_by_year |> \n  arrange(desc(mean_age)) |> \n  head(1)\n```\n:::\n\n\n11. Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemale_athletes <- olympiii_tibble %>%\n  filter(Sex == \"F\",isSummer == TRUE) |> \n  arrange(desc(Height))\n\nhead(female_athletes$Sport,1)\n```\n:::\n\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_height_by_year <- female_athletes %>%\n  group_by(Year) %>%\n  top_n(1, Height) %>%\n  select(Year, Sport, Height, Name)\nlargest_height_by_year\n```\n:::\n\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlargest_height_by_year %>%\n  count(Sport)\n```\n:::\n\n\nVous disposez du texte suivant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte = \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n```\n:::\n\n\n12. En utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que \"26 Juillet 2024\". Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\ndate = str_extract_all(texte, \"\\\\b\\\\d{1,2}\\\\s(?:Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre)\\\\s\\\\d{4}\\\\b\")\ndate\n```\n:::\n\n\n13. Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte_avant_date = str_replace_all(date[[1]],\n  c(\"Juillet\" = \"07\", \"Août\" = \"08\")\n)\ntexte_avant_date\n```\n:::\n\n\n14. Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\ntexte_modifie <- gsub(\"\\\\b(\\\\d{1,2}) (\\\\d{2}) (\\\\d{4})\\\\b\", \"\\\\1-\\\\2-\\\\3\", texte_avant_date)\ndate_final = dmy(texte_modifie)\nclass(date_final)\n```\n:::\n\n\n15. Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo = interval(start = \"2016-08-20\", end = \"2021-07-23\")\nas.numeric(Rio_Tokyo, \"days\")\nas.numeric(Rio_Tokyo, \"week\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris = interval(start = \"2021-08-08\", end = \"2024-07-26\")\nas.numeric(Tokyo_Paris, \"days\")\nas.numeric(Tokyo_Paris, \"week\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}