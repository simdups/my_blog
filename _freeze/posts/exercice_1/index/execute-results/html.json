{
  "hash": "aafc3b42b69d1fd95d15bc36252b363f",
  "result": {
    "markdown": "---\ntitle: \"Exercice 1\"\nauthor: \"Simon Dupas-Brousse\"\ndate: \"2024-03-03\"\ncategories: [news, code, analysis]\neval: false\n---\n\n\nimportation :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath = (\"data/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\")\ndata_ex = read.table(path, header = TRUE, sep = \";\", quote = \"\\\"\")\n```\n:::\n\n\n1.  Créez un script .R intitulé exercice.R.\n\nDésolé mais les quartos c'est mieux. Il faudrait faire ça : usethis::use_r(\"exercice\")\n\n2.  Lisez le fichier exo_1_ex.txt avec la fonction read.table. Le résultat sera affecté à l'objet de nom data_ex. Le jeux de données contient 4 colonnes. Quels sont les noms et la nature des colonnes ? Combien de lignes contient la data.frame ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data_ex)\n```\n:::\n\n\n31 obs\n\n3.  Combien y a t'il de sites olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(grepl(\"Site olympique\", data_ex$sites_olympiques_paralympiques, ignore.case = TRUE))\n```\n:::\n\n\n26 olympiques\n\n4.  Combien y a t'il de sites paralympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(grepl(\"Site paralympique\", data_ex$sites_olympiques_paralympiques, ignore.case = TRUE))\n```\n:::\n\n\n19 paralympiques\n\n5.  Quels sont les sites qui accueillent plusieurs disciplines sportives ?\n\nj'ai juste compté les lignes qui présentent au moins une virgule dans la colonne \"sports\" :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nsites_multisports = subset(data_ex, str_count(sports, \",\") > 0)\nsites_multisports$nom\n```\n:::\n\n\n6.  Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\nDonc parmi les 19 sites qui accueillent plusieurs disciplines, il faut trouver celles qui sont para-olympiques.\n\nJe suis allé chercher la liste sur <https://www.paris2024.org/fr/sports-paralympiques/>\n\nOn obtient ça : Basket fauteuil, **boccia**, **cécifoot**, escrime fauteuil goalball, para athlétisme, para aviron, para badminton, para canoë, para cyclisme sur route, para cyclisme sur piste, para équitation (dressage), para haltérophilie, para judo, para natation, para taekwondo, para tennis de table, para tir à l'arc, para tir sportif, para triathlon, rugby fauteuil, tennis fauteuil, volleyball assis\n\nPour que ça soit plus léger dans le code j'ai utilisé des mots clés tels que para, fauteuil ou assis. Puis j'ai écris les derniers en entier (ceux surlignés).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_para_olympiques <- subset(\n  sites_multisports,\n  grepl(\"fauteuil|Para|assis|Goalball|Cécifoot\", sports, ignore.case = TRUE)\n)\n```\n:::\n\n\n7.  Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nComme dans chaque site les disciplines sont tout le temps différentes, on peut se contenter de compter le(s) site(s) avec le plus de virgules. (ou alors j'ai mal compris la question)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_disciplines <- str_count(data_ex$sports, \",\")\n\n# nombre de virgule maximum dans un site\nmax_nb_virgules <- max(nb_disciplines)\n\n# tous les sites avec l'indice maximum de virgules\nindices_max <- which(nb_disciplines == max_nb_virgules)\n\n# affichage de leur nom\ndata_ex$nom[indices_max]\n```\n:::\n\n\n8.  Quelle discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\nDans un premier temps, il faut découper correctement les disciplines pour ensuite les compter :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsports_separes <- unlist(strsplit(data_ex$sports, \",\"))\ncomptage_disciplines <- table(sports_separes)\n```\n:::\n\n\nMaintenant, on peut identifier la ou les discipline(s) apparue(s) un maximum :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindices2_max <- which(comptage_disciplines == max(comptage_disciplines))\nnames(comptage_disciplines[indices2_max])\n```\n:::\n\n\nPour finir, on affiche les noms des sites qui présentent la discipline \"Athlétisme\" :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_athletisme <- grep(\"Athlétisme\", data_ex$sports)\ndata_ex$nom[sites_athletisme]\n```\n:::\n\n\n9.  A vol d'oiseau, quels sont les sites les deux sites les plus proches ?\n\nDans un premier temps, il faut que les coordonnées soient fournies sous forme de vecteur numérique avec deux éléments (la latitude et la longitude) pour que distHaversine fonctionne. Petit exemple avec les 2 premières lignes du dataset :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geosphere)\n\nexemple = data_ex$geo_point[[1]]\nex2 = data_ex$geo_point[[2]]\n\nla = as.numeric(unlist(strsplit(exemple, \",\")))\nla2 = as.numeric(unlist(strsplit(ex2, \",\")))\n\ndistHaversine(la, la2)\n```\n:::\n\n\nOn va se faire une petite fonction qui fait ça pour nous quand on rentre juste data_ex\\$geo_point\\[\\[1\\]\\] (par exemple) en paramètre :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_entre_points <- function(coord1, coord2) {\n  coord1 <- as.numeric(strsplit(coord1, \",\")[[1]])\n  coord2 <- as.numeric(strsplit(coord2, \",\")[[1]])\n  distHaversine(coord1, coord2)\n}\n# exemple d'utilisation :\ndistance_entre_points(data_ex$geo_point[[3]],data_ex$geo_point[[4]])\n```\n:::\n\n\nMaintenant l'idée c'est de calculer automatiquement le distance entre tous les sites du dataset à l'aide d'une boucle. On stocke les résultats de cette boucle dans une matrice \"distances\" :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances <- matrix(NA, nrow = nrow(data_ex), ncol = nrow(data_ex))\nfor (i in 1:nrow(data_ex)) {\n  for (j in 1:nrow(data_ex)) {\n    distances[i, j] <- distance_entre_points(data_ex[i, \"geo_point\"], data_ex[j, \"geo_point\"])\n  }\n}\n\n# On fait juste gaffe à virer les distances d'un site à lui même\ndiag(distances) <- NA\n```\n:::\n\n\nMaintenant on peut répondre à la question :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_min <- which(distances == min(distances, na.rm = TRUE), arr.ind = TRUE)\n\ndata_ex$nom[dist_min[,1]]\n```\n:::\n\n\nbonus si on veut savoir la distance :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# on cherche la ligne des 2 sites :\nwhich(data_ex$nom == \"Stade BMX de Saint-Quentin-en-Yvelines\")\nwhich(data_ex$nom == \"Vélodrome National de Saint-Quentin-en-Yvelines\")\n\n# on utilise notre fonction :\ndistance_entre_points(data_ex$geo_point[[20]],data_ex$geo_point[[4]])\n```\n:::\n\n\n10. Quels sont les deux sites les plus éloignés ?\n\nPlus qu'à faire l'inverse d'avant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_max <- which(distances == max(distances, na.rm = TRUE), arr.ind = TRUE)\n\ndata_ex$nom[dist_max[,1]]\n```\n:::\n\n\nbonus si on veut savoir la distance :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# on cherche la ligne des 2 sites :\nwhich(data_ex$nom == \"Colline d'Elancourt\")\nwhich(data_ex$nom == \"Stade nautique\")\n\n# on utilise notre fonction :\ndistance_entre_points(data_ex$geo_point[[28]],data_ex$geo_point[[17]])\n```\n:::\n\n\n11. Vous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d'acheter un appartement situé au barycentre de l'ensemble des sites olympiques. Où se situe cet appartement ?\n\nComment calculer un barycentre pour les nuls (pour moi en somme) :\n\nEn pratique, cela signifie que nous additionnons toutes les latitudes et toutes les longitudes de tous les sites, puis nous divisons par le nombre total de sites pour trouver les coordonnées moyennes, qui représentent le barycentre de tous les sites.\n\nok ça part :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# on fait une matrice avec les coord exploitables\ncoordonnees <- sapply(data_ex$geo_point, function(x) as.numeric(strsplit(x, \",\")[[1]]))\n# puis on fait la moyenne de lat et long de cette matrice :\nc(mean(coordonnees[1, ]), mean(coordonnees[2, ]))\n```\n:::\n\n\nMaintenant on va utiliser reverse_geocode pour identifier le nom d'une adresse à partir d'une localisation :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\nlibrary(tibble)\nlibrary(dplyr, warn.conflicts = FALSE)\n\ntibble(\n    latitude = c(48.8668),\n    longitude = c(2.29757)\n  ) %>%\n  reverse_geocode(\n    lat = latitude,\n    long = longitude,\n    method = 'osm',\n    full_results = TRUE\n  )%>%\n  select(address)\n```\n:::\n\n\nj'ai clairement copié collé l'exemple mais bon ça fonctionne. Voilà l'appart du prochain millionaire : 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement\n\nà côté de la tour eiffel sympa.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}