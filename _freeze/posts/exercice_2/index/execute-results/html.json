{
  "hash": "8d048fcff1a9f9f1dc3b892380f7ebde",
  "result": {
    "markdown": "---\ntitle: \"Exercice 2\"\nauthor: \"Simon Dupas-Brousse\"\ndate: \"2024-03-01\"\ncategories: [news, code, analysis]\neval: false\n---\n\n\nJe préviens tout de suite que je n'ai pas continué au-delà de la question 6. Honnêtement, c'est beaucoup trop dur avec le peu d'entraînement qu'on a. J'ai préféré investir mon temps sur GitHub :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\n```\n:::\n\n\n1. Lancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\nhtml_elements(\".wikitable\") |>\nhtml_table()\n```\n:::\n\n\nOn a charger des tables sous forme de listes\n\n2. Nous allons tout d’abord nous intéresser à la première table.\nCréez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\",\n\"Athletes_or\"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. \ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Supprimer la première colonne et ligne\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, -1,]\n\n# Renommer les colonnes (list noms)\nnouveaux_noms <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \n                   \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \n                   \"Athletes_or\")\n\n# Renommer les colonnes\ncolnames(data_medailles_sport_ete) <- nouveaux_noms\n\n# Convertion en entier\nlibrary(dplyr)\n\ncols_to_convert <- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\n\ndata_medailles_sport_ete <- mutate_at(data_medailles_sport_ete, vars(cols_to_convert), as.integer)\n\nsummary(data_medailles_sport_ete)\n```\n:::\n\n\n3. Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete %>% \n  arrange(desc(Total)) %>%  # Trie par ordre décroissant de la colonne \"Total\"\n  head(3)\n```\n:::\n\n\n4. Quelles sont les 3 disciplines avec le moins d’épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete %>% \n  arrange(Epreuves_2020) %>%\n  head(10)\n```\n:::\n\nIl y en a 8.\n\n5. La colonne Editions nous renseigne sur le nombre total d’apparence des disciplines\naux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction\ncalcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions\nprendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle\nannée la discipline est au programme.\n\nSi je comprends bien, on doit faire une fonction qui doit compter le nombre de fois qu'une discipline (une ligne donc) a eu lieu aux JOs en se servant de la colonne Annees.\n\nd'abord on sépare par des virgules. puis ifelse pour gérer les 3 situations possibles et extraire les dates. ensuite setdiff\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nx= \"1896, 1900,1908–1924,depuis 1932\"\nr = str_split(x,\",\", simplify = TRUE)\n\nr[1, 1]\n\nas.integer(r[1, 2])\n\n\n# le + permet d'extraire les chiffres qui sont ensembles\nstr_extract_all(r[1, 3],\"\\\\d+\")\n# on peut aussi faire ça :\na = sapply(str_split(r[1, 3],\"-\"), as.integer)\n\nseq(a[1], a[2], 4)\nseq(1896, 1896, 4)\nsetdiff()\n```\n:::\n\n\n\nPour me simplifier la tâche, j'extraie la première occurrence de quatre chiffres dans Annee :\n\n::: {.cell}\n\n```{.r .cell-code}\nannee_apparition = regmatches(data_medailles_sport_ete$Annees, regexpr(\"\\\\b\\\\d{4}\\\\b\", data_medailles_sport_ete$Annees))\nannee_apparition\n```\n:::\n\n\nEnsuite on peut faire la fonction :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions <- function(depuis) {\n  \n  nb_editions <- numeric(length(annee_apparition))\n  # pour etre sur que c'est un num\n  depuis <- as.numeric(depuis)\n  \n  # Pour chaque discipline\n  for (i in seq_along(annee_apparition)) {\n    # Récupère l'année d'apparition de la discipline\n    annee <- as.numeric(annee_apparition[[i]])\n    \n    # Si 'depuis' est supérieur ou égal à l'année d'apparition\n    if (depuis >= annee) {\n      nb_editions[i] <- (2020 - depuis) / 4 + 1\n    } else {\n      nb_editions[i] <- (2020 - annee) / 4 + 1\n    }\n  }\n  return(nb_editions)\n}\n\ncalcul_nb_editions(1800)\n```\n:::\n\n\nElle fonctionne à quelques détails près comme le fait qu'il y a eu des interruptions.\n(oui du coup elle ne fonctionne pas vraiment :/ )",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}