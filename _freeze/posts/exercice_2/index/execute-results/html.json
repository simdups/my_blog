{
  "hash": "9a87169bd62b23a0ec1ce155f6dc3e31",
  "result": {
    "markdown": "---\ntitle: \"Exercice 2\"\nauthor: \"Simon Dupas-Brousse\"\ndate: \"2024-03-01\"\ncategories: [news, code, analysis]\n---\n\n\nJe préviens tout de suite que je n'ai pas continué au-delà de la question 6. Honnêtement, c'est beaucoup trop dur avec le peu d'entraînement qu'on a. J'ai préféré investir mon temps sur GitHub :)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\n```\n:::\n\n\n1.  Lancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\nhtml_elements(\".wikitable\") |>\nhtml_table()\n```\n:::\n\n\nOn a charger des tables sous forme de listes\n\n2.  Nous allons tout d'abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n'est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\"). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d'entiers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. \ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Supprimer la première colonne et ligne\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, -1,]\n\n# Renommer les colonnes (list noms)\nnouveaux_noms <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \n                   \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \n                   \"Athletes_or\")\n\n# Renommer les colonnes\ncolnames(data_medailles_sport_ete) <- nouveaux_noms\n\n# Convertion en entier\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ncols_to_convert <- c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")\n\ndata_medailles_sport_ete <- mutate_at(data_medailles_sport_ete, vars(cols_to_convert), as.integer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(cols_to_convert)\n\n  # Now:\n  data %>% select(all_of(cols_to_convert))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n```{.r .cell-code}\nsummary(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Discipline           Annees             Editions     Epreuves_2020  \n Length:30          Length:30          Min.   : 4.00   Min.   : 2.00  \n Class :character   Class :character   1st Qu.:14.25   1st Qu.: 2.25  \n Mode  :character   Mode  :character   Median :25.50   Median : 7.00  \n                                       Mean   :20.70   Mean   :10.57  \n                                       3rd Qu.:27.00   3rd Qu.:14.75  \n                                       Max.   :29.00   Max.   :48.00  \n       Or              Argent            Bronze            Total       \n Min.   :   8.00   Min.   :   8.00   Min.   :   9.00   Min.   :  19.0  \n 1st Qu.:  34.25   1st Qu.:  34.25   1st Qu.:  35.25   1st Qu.: 103.8  \n Median : 100.50   Median : 101.00   Median : 109.50   Median : 311.0  \n Mean   : 179.53   Mean   : 178.10   Mean   : 194.17   Mean   : 551.6  \n 3rd Qu.: 257.75   3rd Qu.: 256.00   3rd Qu.: 269.75   3rd Qu.: 769.5  \n Max.   :1028.00   Max.   :1030.00   Max.   :1027.00   Max.   :3085.0  \n Athletes_medailles Athletes_or       \n Length:30          Length:30         \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\n3.  Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete %>% \n  arrange(desc(Total)) %>%  # Trie par ordre décroissant de la colonne \"Total\"\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>                  <chr>     <int>         <int> <int>  <int>  <int> <int>\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\n4.  Quelles sont les 3 disciplines avec le moins d'épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete %>% \n  arrange(Epreuves_2020) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 10\n   Discipline            Annees Editions Epreuves_2020    Or Argent Bronze Total\n   <chr>                 <chr>     <int>         <int> <int>  <int>  <int> <int>\n 1 Football              1900–…       27             2    34     34     35   103\n 2 Golf                  1900–…        4             2     8      8      9    19\n 3 Handball              1936,…       14             2    26     26     26    78\n 4 Hockey sur gazon      1908,…       24             2    35     35     36   106\n 5 Natation synchronisée Depui…       10             2    20     18     19    57\n 6 Pentathlon moderne    Depui…       25             2    42     42     42   126\n 7 Volley-ball           Depui…       15             2    30     30     30    90\n 8 Water polo            1900,…       26             2    28     28     29    85\n 9 Triathlon             Depui…        6             3    13     13     13    39\n10 Basket-ball           Depui…       20             4    32     32     32    96\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\nIl y en a 8.\n\n5.  La colonne Editions nous renseigne sur le nombre total d'apparence des disciplines aux JO d'été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\nSi je comprends bien, on doit faire une fonction qui doit compter le nombre de fois qu'une discipline (une ligne donc) a eu lieu aux JOs en se servant de la colonne Annees.\n\nd'abord on sépare par des virgules. puis ifelse pour gérer les 3 situations possibles et extraire les dates. ensuite setdiff\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: le package 'stringr' a été compilé avec la version R 4.3.2\n```\n:::\n\n```{.r .cell-code}\nx= \"1896, 1900,1908–1924,depuis 1932\"\nr = str_split(x,\",\", simplify = TRUE)\n\nr[1, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1896\"\n```\n:::\n\n```{.r .cell-code}\nas.integer(r[1, 2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1900\n```\n:::\n\n```{.r .cell-code}\n# le + permet d'extraire les chiffres qui sont ensembles\nstr_extract_all(r[1, 3],\"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"1908\" \"1924\"\n```\n:::\n\n```{.r .cell-code}\n# on peut aussi faire ça :\na = sapply(str_split(r[1, 3],\"-\"), as.integer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in lapply(X = X, FUN = FUN, ...): NAs introduits lors de la conversion\nautomatique\n```\n:::\n\n```{.r .cell-code}\n#seq(a[1], a[2], 4)\n#seq(1896, 1896, 4)\n#setdiff()\n```\n:::\n\n\nPour me simplifier la tâche, j'extraie la première occurrence de quatre chiffres dans Annee :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannee_apparition = regmatches(data_medailles_sport_ete$Annees, regexpr(\"\\\\b\\\\d{4}\\\\b\", data_medailles_sport_ete$Annees))\nannee_apparition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"1896\" \"1900\" \"1992\" \"1936\" \"1904\" \"1936\" \"1896\" \"1900\" \"1896\" \"1900\"\n[11] \"1900\" \"1896\" \"1936\" \"1896\" \"1908\" \"1964\" \"1896\" \"1896\" \"1984\" \"1912\"\n[21] \"1904\" \"2000\" \"1896\" \"1988\" \"1896\" \"1900\" \"2000\" \"1900\" \"1964\" \"1900\"\n```\n:::\n:::\n\n\nEnsuite on peut faire la fonction :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions <- function(depuis) {\n  \n  nb_editions <- numeric(length(annee_apparition))\n  # pour etre sur que c'est un num\n  depuis <- as.numeric(depuis)\n  \n  # Pour chaque discipline\n  for (i in seq_along(annee_apparition)) {\n    # Récupère l'année d'apparition de la discipline\n    annee <- as.numeric(annee_apparition[[i]])\n    \n    # Si 'depuis' est supérieur ou égal à l'année d'apparition\n    if (depuis >= annee) {\n      nb_editions[i] <- (2020 - depuis) / 4 + 1\n    } else {\n      nb_editions[i] <- (2020 - annee) / 4 + 1\n    }\n  }\n  return(nb_editions)\n}\n\ncalcul_nb_editions(1800)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 32 31  8 22 30 22 32 31 32 31 31 32 22 32 29 15 32 32 10 28 30  6 32  9 32\n[26] 31  6 31 15 31\n```\n:::\n:::\n\n\nElle fonctionne à quelques détails près comme le fait qu'il y a eu des interruptions. (oui du coup elle ne fonctionne pas vraiment :/ )\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}